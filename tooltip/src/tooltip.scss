@import "../../custommixins";

@function attrValNotInList($attrName, $invalidList){
    $finalSelector: "";
    
    @each $invalidVal in $invalidList{
        $finalSelector: "#{$finalSelector}:not([#{$attrName}=#{$invalidVal}])"
    }
    
    @return $finalSelector;
}

// responsible for positioning;
// the only user styling that should be applied here is border
x-tooltip{
    display: block; // needed to favor horizontal tips, 
                    // use inline-block to favor vertical
    position: absolute;
    margin: 0;
    padding: 0;
    
    z-index: 999;
    overflow: visible;
    
    visibility: hidden;
    opacity: 0;
    max-width: 100%;
    max-height: 100%;
    
    // default styling
    border: 1px solid grey;
    background-color: #eee;
    border-radius: 4px;
    
    @include animated((visibility, transform, opacity), 0.2s);
    
    &[orientation=top]{
        @include transformed(translateY(10px));
    }
    
    &[orientation=bottom]{
        @include transformed(translateY(-10px));
    }
        
    &[orientation=left]{
        @include transformed(translateX(10px));
    }
        
    &[orientation=right]{
        @include transformed(translateX(-10px));
    }
    
    &[visible]{
        visibility: visible;
        opacity: 1;
        @include transformed(none);
    }
    
    // hackery to have auto orientation have the same transform animations
    $autoOrientationSelector: attrValNotInList(orientation, (top, bottom, left, right));
    &#{$autoOrientationSelector}{
        &[auto-orientation=top]{
            @include transformed(translateY(10px));
        }
        
        &[auto-orientation=bottom]{
            @include transformed(translateY(-10px));
        }
            
        &[auto-orientation=left]{
            @include transformed(translateX(10px));
        }
            
        &[auto-orientation=right]{
            @include transformed(translateX(-10px));
        }
        
        &[visible]{
            @include transformed(none);
        }
    }
}

// let user style this to style the balloon
x-tooltip > .tooltip-content{
    position: relative;
    z-index: 2;
    display: block;
    overflow: auto;
    padding: .5em;
    @include boxSizing(border-box);
}

x-tooltip > .tooltip-arrow{
    z-index: 1;
    @include boxSizing(border-box);
    position: absolute;
    
    margin: 0px;
    padding: 0px;
    
    vertical-align: top;
    display: block;
    
    // override arrow size by modifying these together;
    // may also need to mess with transforms to line things up
    // (remember to preserve the rotate(45deg) !
    width: 1em;
    height: 1em;
    
    // default: shares these properties with the tooltip itself
    // can be overridden directly by using .tooltip-arrow class as well
    border: inherit; 
    background: inherit;
    
    // default to pointing down
    &#{attrValNotInList(arrow-direction, (up, left, right))}{
        top: 100%; // default positions to be overridden later
        left: 50%;
        
        @include transformed(translateY(-50%) rotate(45deg));
        border-top-color: transparent !important;
        border-left-color: transparent !important;
    }
    
    &[arrow-direction=up]{
        bottom: 100%;
        left: 50%;
        
        @include transformed(translateY(50%) rotate(45deg));
        border-bottom-color: transparent !important;
        border-right-color: transparent !important;
    }
    
    &[arrow-direction=left]{
        right: 100%;
        top: 50%;
        
        @include transformed(translateX(50%) rotate(45deg));
        border-top-color: transparent !important;
        border-right-color: transparent !important;
    }
    
    &[arrow-direction=right]{
        left: 100%;
        top: 50%;
        
        @include transformed(translateX(-50%) rotate(45deg));
        border-bottom-color: transparent !important;
        border-left-color: transparent !important;
    }
}

